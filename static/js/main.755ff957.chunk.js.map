{"version":3,"sources":["containers/CanvasContainer/CanvasContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Canvas","styled","canvas","_templateObject","Wrapper","div","_templateObject2","draw","event","canvasRef","current","ctx","getContext","_getMousePosition","x","y","_canvas$getBoundingCl","getBoundingClientRect","top","left","clientX","clientY","getMousePosition","lineWidth","lineCap","lineTo","stroke","beginPath","moveTo","CanvasContainer","React","useRef","drawing","useEffect","handleMouseDown","handleMouseUp","finishDrawing","handleMouseMove","addEventListener","removeEventListener","width","height","react_default","a","createElement","ref","App","className","CanvasContainer_CanvasContainer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mfAGA,IAGMA,EAASC,IAAOC,OAAVC,IAHS,IACC,KAOhBC,EAAUH,IAAOI,IAAVC,KAkBPC,EAAO,SAACC,EAAmBC,GAC/B,GAAKA,GAAcA,EAAUC,QAA7B,CACA,IAAMC,EAAMF,EAAUC,QAAQE,WAAW,MACzC,GAAKD,EAAL,CAHiF,IAAAE,EAb1D,SACvBL,EACAC,GAEA,IAAKA,IAAcA,EAAUC,QAAS,MAAO,CAAEI,EAAG,EAAGC,EAAG,GACxD,IAF6BC,EAEdP,EAAUC,QACIO,wBAArBC,EAHqBF,EAGrBE,IAAKC,EAHgBH,EAGhBG,KACb,MAAO,CACLL,EAAGN,EAAMY,QAAUD,EACnBJ,EAAGP,EAAMa,QAAUH,GASJI,CAAiBd,EAAOC,GAAjCK,EALyED,EAKzEC,EAAGC,EALsEF,EAKtEE,EAEXJ,EAAIY,UAAY,GAChBZ,EAAIa,QAAU,QACdb,EAAIc,OAAOX,EAAGC,GACdJ,EAAIe,SACJf,EAAIgB,YACJhB,EAAIiB,OAAOd,EAAGC,MAUHc,EAAkB,WAC7B,IAAMpB,EAAYqB,IAAMC,OAA0B,MAG9CC,GAAU,EAwCd,OAvCAF,IAAMG,UAAU,WACd,IAAMC,EAAkB,SAAC1B,GACvBwB,GAAU,EACVzB,EAAKC,EAAOC,IAER0B,EAAgB,SAAC3B,GACrBwB,GAAU,EAlBM,SAACxB,EAAmBC,GACxC,GAAKA,GAAcA,EAAUC,QAA7B,CACA,IAAMC,EAAMF,EAAUC,QAAQE,WAAW,MACpCD,GACLA,EAAIgB,aAeAS,CAAc5B,EAAOC,IAEjB4B,EAAkB,SAAC7B,GAClBwB,GACLzB,EAAKC,EAAOC,IASd,OANIA,GAAaA,EAAUC,UACzBD,EAAUC,QAAQ4B,iBAAiB,YAAaJ,GAChDzB,EAAUC,QAAQ4B,iBAAiB,UAAWH,GAC9C1B,EAAUC,QAAQ4B,iBAAiB,YAAaD,IAG3C,WACD5B,GAAaA,EAAUC,UACzBD,EAAUC,QAAQ6B,oBAAoB,YAAaL,GACnDzB,EAAUC,QAAQ6B,oBAAoB,UAAWJ,GACjD1B,EAAUC,QAAQ6B,oBAAoB,YAAaF,OAKzDP,IAAMG,UAAU,WACd,GAAIxB,GAAaA,EAAUC,QAAS,CAClC,IAAMR,EAASO,EAAUC,QAEzB,IADYR,EAAOU,WAAW,MACpB,OACVV,EAAOsC,MAvFQ,IAwFftC,EAAOuC,OAvFS,OA4FlBC,EAAAC,EAAAC,cAACxC,EAAD,KACEsC,EAAAC,EAAAC,cAAC5C,EAAD,CACE6C,IAAKpC,MCrFEqC,mLARX,OACEJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAACI,EAAD,cAJUC,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.755ff957.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst CANVAS_WIDTH = 300;\nconst CANVAS_HEIGHT = 300;\n\nconst Canvas = styled.canvas`\n  width: ${CANVAS_WIDTH}px;\n  height: ${CANVAS_HEIGHT}px;\n  border: 1px solid #000;\n`;\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst getMousePosition = (\n  event: MouseEvent,\n  canvasRef: React.RefObject<HTMLCanvasElement>\n): { x: number, y: number } => {\n  if (!canvasRef || !canvasRef.current) return { x: 0, y: 0 };\n  const canvas = canvasRef.current;\n  const { top, left } = canvas.getBoundingClientRect();\n  return {\n    x: event.clientX - left,\n    y: event.clientY - top,\n  }\n};\n\nconst draw = (event: MouseEvent, canvasRef: React.RefObject<HTMLCanvasElement>) => {\n  if (!canvasRef || !canvasRef.current) return;\n  const ctx = canvasRef.current.getContext('2d');\n  if (!ctx) return;\n  \n  const { x, y } = getMousePosition(event, canvasRef);\n\n  ctx.lineWidth = 10;\n  ctx.lineCap = 'round';\n  ctx.lineTo(x, y);\n  ctx.stroke();\n  ctx.beginPath();\n  ctx.moveTo(x, y);\n}\n\nconst finishDrawing = (event: MouseEvent, canvasRef: React.RefObject<HTMLCanvasElement>) => {\n  if (!canvasRef || !canvasRef.current) return;\n  const ctx = canvasRef.current.getContext('2d');\n  if (!ctx) return;\n  ctx.beginPath();\n}\n\nexport const CanvasContainer = () => {\n  const canvasRef = React.useRef<HTMLCanvasElement>(null);\n\n  // Drawing\n  let drawing = false;\n  React.useEffect(() => {\n    const handleMouseDown = (event: MouseEvent) => {\n      drawing = true;\n      draw(event, canvasRef);\n    }\n    const handleMouseUp = (event: MouseEvent) => {\n      drawing = false;\n      finishDrawing(event, canvasRef);\n    }\n    const handleMouseMove = (event: MouseEvent) => {\n      if (!drawing) return;\n      draw(event, canvasRef);\n    };\n\n    if (canvasRef && canvasRef.current) {\n      canvasRef.current.addEventListener('mousedown', handleMouseDown);\n      canvasRef.current.addEventListener('mouseup', handleMouseUp);\n      canvasRef.current.addEventListener('mousemove', handleMouseMove);\n    }\n\n    return () => {\n      if (canvasRef && canvasRef.current) {\n        canvasRef.current.removeEventListener('mousedown', handleMouseDown);\n        canvasRef.current.removeEventListener('mouseup', handleMouseUp);\n        canvasRef.current.removeEventListener('mousemove', handleMouseMove);\n      }\n    }\n  });\n\n  React.useEffect(() => {\n    if (canvasRef && canvasRef.current) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      if (!ctx) return;\n      canvas.width = CANVAS_WIDTH;\n      canvas.height = CANVAS_HEIGHT;\n    }\n  });\n\n  return (\n    <Wrapper>\n      <Canvas\n        ref={canvasRef}\n      />\n    </Wrapper>\n  );\n};\n","import React, { Component } from 'react';\nimport { CanvasContainer } from './containers/CanvasContainer/CanvasContainer';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <CanvasContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}